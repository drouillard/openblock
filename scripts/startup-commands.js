const shell = require('shelljs');

const dataBaseDir = './data';
const configBaseDir = './config';

/**
 * Shell commands to assist in setting up ethereum nodes on a private network
 */

/**
 * Check if directory that stores state of local node exists
 * If it does not then create it
 * @return {boolean} whether data directory exists
 */
function ensureDataDirectoryExists() {
  return false;
}

/**
 * Ensure Geth is installed
 * @return {boolean} whether geth is installed locally
 */
function verifyGethInstalled() {
  return false;
}

/**
 * Ensure Bootnode command line tool is installed. Bootnodes are used
 * by other nodes to discover each other. It is not a full node.
 * More info: https://github.com/ethereum/go-ethereum/wiki/Setting-up-private-network-or-local-cluster
 * @return {boolean} whether bootnode command line tool is installed locally
 */
function verifyBootnodeCommandLineToolInstalled() {
  return false;
}

/**
 * Initialze an ethererum
 * @param  {boolean} forceRecreate delete existing state data and start fresh
 * @return {boolean} if node was able to be initialized
 */
export function initializeNode(forceRecreate) {
  // delete current data and start fresh
  if (forceRecreate) {

  }

  if (!dataDirectoryExists) {

  }
}

/**
 * Running a spectator (non-mining) node
 */
export function runNode() {
  // Verify node has initialized

}

/**
 * Start a node that actively mines
 * @return {[type]} [description]
 */
export function runMiningNode() {
  // Verify node has initialized

}

export function runBootnode() {
  // Verify bootnode command line tool has been installed

  // Verify we have the key needed
  // A consistent key is required because the key
  // acts a seed for generating the node address that other nodes
  // need to specify as their bootnode in their command line arguments

  // Sanity check to determine if address generated matches what was
  // previously generated by the bootnode command line tool.

}
